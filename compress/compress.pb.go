// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compress.proto

/*
Package compress is a generated protocol buffer package.

It is generated from these files:
	compress.proto

It has these top-level messages:
	CompressRequest
	CompressReply
*/
package compress

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 数据类型，图片、文本
type DataType int32

const (
	DataType_IMAGE DataType = 0
	DataType_TEXT  DataType = 1
)

var DataType_name = map[int32]string{
	0: "IMAGE",
	1: "TEXT",
}
var DataType_value = map[string]int32{
	"IMAGE": 0,
	"TEXT":  1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 压缩算法
type Algorithm int32

const (
	Algorithm_GZIP   Algorithm = 0
	Algorithm_BROTLI Algorithm = 1
)

var Algorithm_name = map[int32]string{
	0: "GZIP",
	1: "BROTLI",
}
var Algorithm_value = map[string]int32{
	"GZIP":   0,
	"BROTLI": 1,
}

func (x Algorithm) String() string {
	return proto.EnumName(Algorithm_name, int32(x))
}
func (Algorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The request message containing the user's name.
type CompressRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CompressRequest) Reset()                    { *m = CompressRequest{} }
func (m *CompressRequest) String() string            { return proto.CompactTextString(m) }
func (*CompressRequest) ProtoMessage()               {}
func (*CompressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompressRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The response message containing the greetings
type CompressReply struct {
	Type      DataType  `protobuf:"varint,1,opt,name=type,enum=compress.DataType" json:"type,omitempty"`
	Algorithm Algorithm `protobuf:"varint,2,opt,name=algorithm,enum=compress.Algorithm" json:"algorithm,omitempty"`
	Data      []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CompressReply) Reset()                    { *m = CompressReply{} }
func (m *CompressReply) String() string            { return proto.CompactTextString(m) }
func (*CompressReply) ProtoMessage()               {}
func (*CompressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompressReply) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_IMAGE
}

func (m *CompressReply) GetAlgorithm() Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Algorithm_GZIP
}

func (m *CompressReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CompressRequest)(nil), "compress.CompressRequest")
	proto.RegisterType((*CompressReply)(nil), "compress.CompressReply")
	proto.RegisterEnum("compress.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("compress.Algorithm", Algorithm_name, Algorithm_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Compress service

type CompressClient interface {
	// Sends a greeting
	Do(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressReply, error)
}

type compressClient struct {
	cc *grpc.ClientConn
}

func NewCompressClient(cc *grpc.ClientConn) CompressClient {
	return &compressClient{cc}
}

func (c *compressClient) Do(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressReply, error) {
	out := new(CompressReply)
	err := grpc.Invoke(ctx, "/compress.Compress/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Compress service

type CompressServer interface {
	// Sends a greeting
	Do(context.Context, *CompressRequest) (*CompressReply, error)
}

func RegisterCompressServer(s *grpc.Server, srv CompressServer) {
	s.RegisterService(&_Compress_serviceDesc, srv)
}

func _Compress_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compress.Compress/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressServer).Do(ctx, req.(*CompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compress.Compress",
	HandlerType: (*CompressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Compress_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compress.proto",
}

func init() { proto.RegisterFile("compress.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0xcf, 0x2d,
	0x28, 0x4a, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x54,
	0xb9, 0xf8, 0x9d, 0xa1, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96,
	0x94, 0xc4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x30, 0x5b, 0xa9, 0x8e, 0x8b,
	0x17, 0xa1, 0xac, 0x20, 0xa7, 0x52, 0x48, 0x8d, 0x8b, 0xa5, 0xa4, 0xb2, 0x20, 0x15, 0xac, 0x88,
	0xcf, 0x48, 0x48, 0x0f, 0x6e, 0x81, 0x4b, 0x62, 0x49, 0x62, 0x48, 0x65, 0x41, 0x6a, 0x10, 0x58,
	0x5e, 0xc8, 0x90, 0x8b, 0x33, 0x31, 0x27, 0x3d, 0xbf, 0x28, 0xb3, 0x24, 0x23, 0x57, 0x82, 0x09,
	0xac, 0x58, 0x18, 0xa1, 0xd8, 0x11, 0x26, 0x15, 0x84, 0x50, 0x05, 0xb7, 0x9f, 0x19, 0x61, 0xbf,
	0x96, 0x3c, 0x17, 0x07, 0xcc, 0x60, 0x21, 0x4e, 0x2e, 0x56, 0x4f, 0x5f, 0x47, 0x77, 0x57, 0x01,
	0x06, 0x21, 0x0e, 0x2e, 0x96, 0x10, 0xd7, 0x88, 0x10, 0x01, 0x46, 0x2d, 0x45, 0x2e, 0x4e, 0xb8,
	0x61, 0x20, 0x61, 0xf7, 0x28, 0xcf, 0x00, 0x01, 0x06, 0x21, 0x2e, 0x2e, 0x36, 0xa7, 0x20, 0xff,
	0x10, 0x1f, 0x4f, 0x01, 0x46, 0x23, 0x37, 0x2e, 0x0e, 0x98, 0x1f, 0x84, 0xac, 0xb8, 0x98, 0x5c,
	0xf2, 0x85, 0x24, 0x11, 0x2e, 0x41, 0x0b, 0x04, 0x29, 0x71, 0x6c, 0x52, 0x05, 0x39, 0x95, 0x4a,
	0x0c, 0x4e, 0xca, 0x5c, 0x02, 0x65, 0x99, 0xc9, 0x89, 0x79, 0xc5, 0xf9, 0x70, 0x35, 0x4e, 0xf0,
	0xd0, 0x09, 0x00, 0x85, 0x6f, 0x00, 0x63, 0x12, 0x1b, 0x38, 0xa0, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0x80, 0x23, 0x34, 0x7a, 0x01, 0x00, 0x00,
}
