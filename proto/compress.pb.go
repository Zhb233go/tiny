// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compress.proto

/*
Package compress is a generated protocol buffer package.

It is generated from these files:
	compress.proto

It has these top-level messages:
	CompressRequest
	CompressReply
*/
package compress

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 压缩类型
type Type int32

const (
	// GZIP BROTLI用于文本的压缩
	Type_GZIP   Type = 0
	Type_BROTLI Type = 1
	Type_WEBP   Type = 2
	Type_JPEG   Type = 3
	Type_PNG    Type = 4
)

var Type_name = map[int32]string{
	0: "GZIP",
	1: "BROTLI",
	2: "WEBP",
	3: "JPEG",
	4: "PNG",
}
var Type_value = map[string]int32{
	"GZIP":   0,
	"BROTLI": 1,
	"WEBP":   2,
	"JPEG":   3,
	"PNG":    4,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message containing the user's name.
type CompressRequest struct {
	// 压缩类型
	Type Type `protobuf:"varint,1,opt,name=type,enum=compress.Type" json:"type,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 图片类型
	ImageType string `protobuf:"bytes,3,opt,name=imageType" json:"imageType,omitempty"`
	// 图片宽度
	Width uint32 `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	// 图片高度
	Height uint32 `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	// 图片质量
	Quality uint32 `protobuf:"varint,6,opt,name=quality" json:"quality,omitempty"`
}

func (m *CompressRequest) Reset()                    { *m = CompressRequest{} }
func (m *CompressRequest) String() string            { return proto.CompactTextString(m) }
func (*CompressRequest) ProtoMessage()               {}
func (*CompressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompressRequest) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GZIP
}

func (m *CompressRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CompressRequest) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *CompressRequest) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CompressRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CompressRequest) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// The response message containing the greetings
type CompressReply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CompressReply) Reset()                    { *m = CompressReply{} }
func (m *CompressReply) String() string            { return proto.CompactTextString(m) }
func (*CompressReply) ProtoMessage()               {}
func (*CompressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompressReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CompressRequest)(nil), "compress.CompressRequest")
	proto.RegisterType((*CompressReply)(nil), "compress.CompressReply")
	proto.RegisterEnum("compress.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Compress service

type CompressClient interface {
	// dom compress
	Do(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressReply, error)
}

type compressClient struct {
	cc *grpc.ClientConn
}

func NewCompressClient(cc *grpc.ClientConn) CompressClient {
	return &compressClient{cc}
}

func (c *compressClient) Do(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressReply, error) {
	out := new(CompressReply)
	err := grpc.Invoke(ctx, "/compress.Compress/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Compress service

type CompressServer interface {
	// dom compress
	Do(context.Context, *CompressRequest) (*CompressReply, error)
}

func RegisterCompressServer(s *grpc.Server, srv CompressServer) {
	s.RegisterService(&_Compress_serviceDesc, srv)
}

func _Compress_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compress.Compress/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressServer).Do(ctx, req.(*CompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compress.Compress",
	HandlerType: (*CompressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Compress_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compress.proto",
}

func init() { proto.RegisterFile("compress.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xed, 0x36, 0x6d, 0x07, 0x5b, 0x97, 0x41, 0x74, 0x15, 0x0f, 0x21, 0xbd, 0x04,
	0x0f, 0x3d, 0xd4, 0x93, 0x1e, 0xa3, 0x35, 0x54, 0x44, 0x97, 0xa5, 0x20, 0x78, 0x8b, 0xed, 0xd2,
	0x04, 0x52, 0xb3, 0x6d, 0xb6, 0x4a, 0x7e, 0x95, 0x7f, 0x51, 0xb2, 0x36, 0x09, 0x88, 0xb7, 0xf9,
	0xde, 0x9b, 0xdd, 0x79, 0xcc, 0xc0, 0x68, 0x99, 0x6d, 0xf4, 0x4e, 0xe5, 0xf9, 0x44, 0xef, 0x32,
	0x93, 0x61, 0xbf, 0x62, 0xef, 0x9b, 0xc0, 0xf1, 0xdd, 0x01, 0xa4, 0xda, 0xee, 0x55, 0x6e, 0xd0,
	0x03, 0x6a, 0x0a, 0xad, 0x38, 0x71, 0x89, 0x3f, 0x9a, 0x8e, 0x26, 0xf5, 0xe3, 0x45, 0xa1, 0x95,
	0xb4, 0x1e, 0x22, 0xd0, 0x55, 0x64, 0x22, 0xde, 0x76, 0x89, 0x7f, 0x24, 0x6d, 0x8d, 0x97, 0x30,
	0x48, 0x36, 0xd1, 0x5a, 0x95, 0x6d, 0xbc, 0xe3, 0x12, 0x7f, 0x20, 0x1b, 0x01, 0x4f, 0xa0, 0xfb,
	0x95, 0xac, 0x4c, 0xcc, 0xa9, 0x4b, 0xfc, 0xa1, 0xfc, 0x05, 0x3c, 0x05, 0x27, 0x56, 0xc9, 0x3a,
	0x36, 0xbc, 0x6b, 0xe5, 0x03, 0x21, 0x87, 0xde, 0x76, 0x1f, 0xa5, 0x89, 0x29, 0xb8, 0x63, 0x8d,
	0x0a, 0xbd, 0x31, 0x0c, 0x9b, 0xc0, 0x3a, 0x2d, 0xea, 0x28, 0xa4, 0x89, 0x72, 0x75, 0x03, 0xd4,
	0x0e, 0xed, 0x03, 0x0d, 0xdf, 0xe6, 0x82, 0xb5, 0x10, 0xc0, 0x09, 0xe4, 0xcb, 0xe2, 0x69, 0xce,
	0x48, 0xa9, 0xbe, 0xce, 0x02, 0xc1, 0xda, 0x65, 0xf5, 0x28, 0x66, 0x21, 0xeb, 0x60, 0x0f, 0x3a,
	0xe2, 0x39, 0x64, 0x74, 0xfa, 0x00, 0xfd, 0xea, 0x7f, 0xbc, 0x85, 0xf6, 0x7d, 0x86, 0xe7, 0xcd,
	0x06, 0xfe, 0xac, 0xea, 0xe2, 0xec, 0x3f, 0x4b, 0xa7, 0x85, 0xd7, 0x0a, 0xc6, 0xc0, 0x3e, 0x93,
	0x65, 0xf4, 0x91, 0x67, 0x75, 0x4f, 0x50, 0x27, 0x17, 0xe5, 0x19, 0x04, 0x79, 0x77, 0xec, 0x3d,
	0xae, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xab, 0x08, 0xa9, 0xa1, 0x01, 0x00, 0x00,
}
