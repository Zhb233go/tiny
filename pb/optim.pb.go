// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optim.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_UNKNOWN Type = 0
	Type_GZIP    Type = 1
	Type_BR      Type = 2
	// snappy
	Type_SNAPPY Type = 3
	// lz4
	Type_LZ4 Type = 4
	// zstd
	Type_ZSTD Type = 5
	Type_JPEG Type = 11
	Type_PNG  Type = 12
	Type_WEBP Type = 13
)

var Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "GZIP",
	2:  "BR",
	3:  "SNAPPY",
	4:  "LZ4",
	5:  "ZSTD",
	11: "JPEG",
	12: "PNG",
	13: "WEBP",
}

var Type_value = map[string]int32{
	"UNKNOWN": 0,
	"GZIP":    1,
	"BR":      2,
	"SNAPPY":  3,
	"LZ4":     4,
	"ZSTD":    5,
	"JPEG":    11,
	"PNG":     12,
	"WEBP":    13,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0f4449489fcc4ff, []int{0}
}

// The request message for optim
type OptimRequest struct {
	// 数据类型
	Source Type   `protobuf:"varint,1,opt,name=source,proto3,enum=pb.Type" json:"source,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 输出类型
	Output  Type   `protobuf:"varint,6,opt,name=output,proto3,enum=pb.Type" json:"output,omitempty"`
	Quality uint32 `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty"`
	Width   uint32 `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height  uint32 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// 裁剪类型
	Crop                 uint32   `protobuf:"varint,10,opt,name=crop,proto3" json:"crop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptimRequest) Reset()         { *m = OptimRequest{} }
func (m *OptimRequest) String() string { return proto.CompactTextString(m) }
func (*OptimRequest) ProtoMessage()    {}
func (*OptimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f4449489fcc4ff, []int{0}
}

func (m *OptimRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptimRequest.Unmarshal(m, b)
}
func (m *OptimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptimRequest.Marshal(b, m, deterministic)
}
func (m *OptimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptimRequest.Merge(m, src)
}
func (m *OptimRequest) XXX_Size() int {
	return xxx_messageInfo_OptimRequest.Size(m)
}
func (m *OptimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OptimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OptimRequest proto.InternalMessageInfo

func (m *OptimRequest) GetSource() Type {
	if m != nil {
		return m.Source
	}
	return Type_UNKNOWN
}

func (m *OptimRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OptimRequest) GetOutput() Type {
	if m != nil {
		return m.Output
	}
	return Type_UNKNOWN
}

func (m *OptimRequest) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *OptimRequest) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *OptimRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *OptimRequest) GetCrop() uint32 {
	if m != nil {
		return m.Crop
	}
	return 0
}

// The response message for optim
type OptimReply struct {
	Output               Type     `protobuf:"varint,1,opt,name=output,proto3,enum=pb.Type" json:"output,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Width                uint32   `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptimReply) Reset()         { *m = OptimReply{} }
func (m *OptimReply) String() string { return proto.CompactTextString(m) }
func (*OptimReply) ProtoMessage()    {}
func (*OptimReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f4449489fcc4ff, []int{1}
}

func (m *OptimReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptimReply.Unmarshal(m, b)
}
func (m *OptimReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptimReply.Marshal(b, m, deterministic)
}
func (m *OptimReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptimReply.Merge(m, src)
}
func (m *OptimReply) XXX_Size() int {
	return xxx_messageInfo_OptimReply.Size(m)
}
func (m *OptimReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OptimReply.DiscardUnknown(m)
}

var xxx_messageInfo_OptimReply proto.InternalMessageInfo

func (m *OptimReply) GetOutput() Type {
	if m != nil {
		return m.Output
	}
	return Type_UNKNOWN
}

func (m *OptimReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OptimReply) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *OptimReply) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.Type", Type_name, Type_value)
	proto.RegisterType((*OptimRequest)(nil), "pb.OptimRequest")
	proto.RegisterType((*OptimReply)(nil), "pb.OptimReply")
}

func init() { proto.RegisterFile("optim.proto", fileDescriptor_b0f4449489fcc4ff) }

var fileDescriptor_b0f4449489fcc4ff = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x5f, 0x6b, 0xc2, 0x30,
	0x14, 0xc5, 0x4d, 0xad, 0xa9, 0xbb, 0xfe, 0x21, 0x5c, 0xc6, 0x08, 0x7b, 0x2a, 0x3e, 0xc9, 0x60,
	0x3e, 0xb8, 0xb1, 0xf7, 0x89, 0x22, 0xfb, 0x43, 0x0d, 0xd5, 0x21, 0xf3, 0xad, 0x6a, 0x99, 0x85,
	0x8e, 0xc4, 0x9a, 0x32, 0xfa, 0xf5, 0xf6, 0xc9, 0x46, 0xd2, 0x0e, 0xca, 0xd8, 0x1e, 0xf6, 0x76,
	0xce, 0x2f, 0xb9, 0xc9, 0x39, 0x5c, 0xe8, 0x48, 0xa5, 0x93, 0xf7, 0x91, 0xca, 0xa4, 0x96, 0xe8,
	0xa8, 0xed, 0xe0, 0x93, 0x40, 0x77, 0x61, 0x58, 0x18, 0x1f, 0xf3, 0xf8, 0xa4, 0xd1, 0x07, 0x7a,
	0x92, 0x79, 0xb6, 0x8b, 0x39, 0xf1, 0xc9, 0xb0, 0x3f, 0x6e, 0x8f, 0xd4, 0x76, 0xb4, 0x2a, 0x54,
	0x1c, 0x56, 0x1c, 0x11, 0xdc, 0x7d, 0xa4, 0x23, 0xee, 0xf8, 0x64, 0xd8, 0x0d, 0xad, 0x36, 0x53,
	0x32, 0xd7, 0x2a, 0xd7, 0x9c, 0xfe, 0x9c, 0x2a, 0x39, 0x72, 0xf0, 0x8e, 0x79, 0x94, 0x26, 0xba,
	0xe0, 0x9e, 0x4f, 0x86, 0xbd, 0xf0, 0xdb, 0xe2, 0x39, 0xb4, 0x3e, 0x92, 0xbd, 0x3e, 0xf0, 0xb6,
	0xe5, 0xa5, 0xc1, 0x0b, 0xa0, 0x87, 0x38, 0x79, 0x3b, 0x68, 0x7e, 0x66, 0x71, 0xe5, 0xcc, 0xef,
	0xbb, 0x4c, 0x2a, 0x0e, 0x96, 0x5a, 0x3d, 0x50, 0x00, 0x55, 0x07, 0x95, 0x16, 0xb5, 0x2c, 0xe4,
	0x8f, 0x2c, 0xbf, 0x35, 0xf8, 0x57, 0x8a, 0xab, 0x08, 0x5c, 0xf3, 0x22, 0x76, 0xc0, 0x7b, 0x09,
	0x9e, 0x82, 0xc5, 0x3a, 0x60, 0x0d, 0x6c, 0x83, 0x3b, 0xdf, 0x3c, 0x08, 0x46, 0x90, 0x82, 0x33,
	0x09, 0x99, 0x83, 0x00, 0x74, 0x19, 0xdc, 0x0b, 0xf1, 0xca, 0x9a, 0xe8, 0x41, 0xf3, 0x79, 0x73,
	0xcb, 0x5c, 0x73, 0x6d, 0xb3, 0x5c, 0x4d, 0x59, 0xcb, 0xa8, 0x47, 0x31, 0x9b, 0xb3, 0x8e, 0x39,
	0x14, 0xc1, 0x9c, 0x75, 0x0d, 0x5a, 0xcf, 0x26, 0x82, 0xf5, 0xc6, 0x77, 0xd0, 0xb2, 0xa5, 0xf0,
	0x1a, 0xbc, 0xa9, 0x2c, 0x25, 0x33, 0x55, 0xea, 0xeb, 0xba, 0xec, 0xd7, 0x88, 0x4a, 0x8b, 0x41,
	0x63, 0x4b, 0xed, 0x72, 0x6f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xe5, 0xd5, 0x3f, 0xeb,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OptimClient is the client API for Optim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OptimClient interface {
	DoOptim(ctx context.Context, in *OptimRequest, opts ...grpc.CallOption) (*OptimReply, error)
}

type optimClient struct {
	cc *grpc.ClientConn
}

func NewOptimClient(cc *grpc.ClientConn) OptimClient {
	return &optimClient{cc}
}

func (c *optimClient) DoOptim(ctx context.Context, in *OptimRequest, opts ...grpc.CallOption) (*OptimReply, error) {
	out := new(OptimReply)
	err := c.cc.Invoke(ctx, "/pb.Optim/DoOptim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptimServer is the server API for Optim service.
type OptimServer interface {
	DoOptim(context.Context, *OptimRequest) (*OptimReply, error)
}

// UnimplementedOptimServer can be embedded to have forward compatible implementations.
type UnimplementedOptimServer struct {
}

func (*UnimplementedOptimServer) DoOptim(ctx context.Context, req *OptimRequest) (*OptimReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOptim not implemented")
}

func RegisterOptimServer(s *grpc.Server, srv OptimServer) {
	s.RegisterService(&_Optim_serviceDesc, srv)
}

func _Optim_DoOptim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimServer).DoOptim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Optim/DoOptim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimServer).DoOptim(ctx, req.(*OptimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Optim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Optim",
	HandlerType: (*OptimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoOptim",
			Handler:    _Optim_DoOptim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optim.proto",
}
